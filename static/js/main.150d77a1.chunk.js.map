{"version":3,"sources":["components/receiver.js","services/io.js","components/sender.js","components/channel.js","App.js","serviceWorker.js","index.js"],"names":["Receiver","props","className","id","name","clients","mssgs","map","mssg","author","text","socket","socketio","Sender","state","authorHandler","e","setState","target","value","textHandler","keyPressed","key","sendMsg","emit","type","placeholder","onChange","this","onKeyPress","onClick","React","Component","Channel","room","channelHandler","getIn","App","online","messages","recvMethods","updateMsgs","data","console","log","clear","counter","nRoom","componentDidMount","on","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.150d77a1.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Receiver(props){\n    return (\n      <div className=\"receiver content-box\">\n        <center><h1 className=\"mssg\" id=\"name\">Room: {props.name} - {props.clients} online</h1></center>\n        <center><p className=\"mssg\">Server: This chat have been cleared</p></center>\n        {props.mssgs.map((mssg) => (\n          <p className=\"mssg\">\n            {mssg.author}: {mssg.text}<br />\n          </p>\n        ))}\n      </div>\n    );\n}\n\nexport default Receiver;\n","import socketio from 'socket.io-client';\n\nconst socket = socketio('https://mychatteste.herokuapp.com/');\n\nexport default socket;","import React from 'react';\nimport socket from '../services/io';\n\nclass Sender extends React.Component {\n  state={\n    author: '',\n    text:''\n  };\n  \n  authorHandler = (e) => {\n    this.setState({author: e.target.value})\n  };\n  \n  textHandler = (e) => {\n    this.setState({text: e.target.value})\n  };\n  \n  keyPressed = (e) => {\n    if(e.key === \"Enter\"){\n      this.sendMsg();\n    }\n  };\n  \n  sendMsg = () => {\n    const {author, text} = this.state;\n    socket.emit('send', {author, text});\n  };\n\n  render(){\n    return (\n      <div className=\"sender content-box\">\n        <input type=\"text\" placeholder=\"Author:\" className=\"message-input\" onChange={this.authorHandler} onKeyPress={this.keyPressed}/>\n        <textarea placeholder=\"Text:\" className=\"message-input\" onChange={this.textHandler} onKeyPress={this.keyPressed}></textarea>\n        <button onClick={this.sendMsg}>Send</button>\n      </div>\n    );\n  }\n}\n\nexport default Sender;\n","import React from 'react';\n\nclass Channel extends React.Component {\n  state={\n    room: ''\n  };\n  \n  channelHandler = (e) => {\n    this.setState({room: e.target.value});\n  };\n  \n  keyPressed = (e) => {\n    if(e.key === \"Enter\"){\n      this.props.getIn(this.state.room);\n    }\n  };\n\n  render(){\n    return (\n      <div className=\"sender content-box\">\n        <input type=\"text\" placeholder=\"Channel:\" className=\"message-input\" onChange={this.channelHandler} onKeyPress={this.keyPressed}/>\n        <button onClick={() => {this.props.getIn(this.state.room)}}>Send</button>\n      </div>\n    );\n  }\n}\n\nexport default Channel;\n","import React from 'react';\nimport Receiver from './components/receiver';\nimport Sender from './components/sender';\nimport Channel from './components/channel';\nimport socket from './services/io';\n\nclass App extends React.Component{\n  state = {\n    room: \"default\",\n    online: 0,\n    messages: []\n  };\n  \n  recvMethods = {\n    updateMsgs: (data) => {\n      this.setState((state) => {\n        console.log(state.messages);\n        return({messages: [...state.messages, data]});\n      });\n    },\n    clear: () => {\n      this.setState({messages: []});\n    }\n  };\n  \n  counter = (clients) => {\n    this.setState({online: clients});\n  };\n  \n  getIn = (nRoom) => {\n    console.log(nRoom);\n    nRoom = nRoom || \"default\";\n    \n    socket.emit('get', nRoom);\n    this.setState({room: nRoom});\n  };\n  \n  componentDidMount = () => {\n    const recvMethods = this.recvMethods;\n    const counter = this.counter;\n    socket.on('message', function(data){\n      recvMethods.updateMsgs(data);\n    });\n    socket.on('counter', function(clients){\n      counter(clients);\n    });\n    socket.on('clear', function(){\n      recvMethods.clear();\n   });\n  };\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Receiver mssgs={this.state.messages} clients={this.state.online} name={this.state.room}/>\n        <Sender />\n        <Channel getIn={this.getIn} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}