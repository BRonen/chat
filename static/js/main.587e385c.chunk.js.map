{"version":3,"sources":["components/receiver.js","services/io.js","components/sender.js","components/channel.js","App.js","serviceWorker.js","index.js"],"names":["Receiver","props","className","id","name","clients","mssgs","map","mssg","author","text","socket","socketio","Sender","state","authorHandler","e","setState","target","value","textHandler","keyPressed","key","preventDefault","sendMsg","emit","type","placeholder","maxLength","onChange","this","onKeyPress","onClick","bind","document","getElementById","React","Component","Channel","room","channelHandler","getIn","maxlength","App","online","messages","recvMethods","updateMsgs","data","console","log","clear","counter","nRoom","componentDidMount","on","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.587e385c.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Receiver(props){\n    return (\n      <div className=\"receiver content-box\">\n        <center><h1 className=\"mssg\" id=\"name\">Room: {props.name} - {props.clients} online</h1></center>\n        <center><p className=\"mssg\">Server: This chat have been cleared</p></center>\n        {props.mssgs.map((mssg) => (\n          <p className=\"mssg\">\n            {mssg.author}: {mssg.text}<br />\n          </p>\n        ))}\n      </div>\n    );\n}\n\nexport default Receiver;\n","import socketio from 'socket.io-client';\n\nconst socket = socketio('https://mychatteste.herokuapp.com/');\n\nexport default socket;","import React from 'react';\nimport socket from '../services/io';\n\nclass Sender extends React.Component {\n  state={\n    author: '',\n    text:''\n  };\n  \n  authorHandler = (e) => {\n    this.setState({author: e.target.value})\n  };\n  \n  textHandler = (e) => {\n    this.setState({text: e.target.value})\n  };\n  \n  keyPressed = (e) => {\n    if(e.key === \"Enter\"){\n      e.preventDefault();\n      this.sendMsg(e.target);\n    }\n  };\n  \n  sendMsg = (target) => {\n    const {author, text} = this.state;\n    socket.emit('send', {author, text});\n    target.value = '';\n  };\n\n  render(){\n    return (\n      <div className=\"sender content-box\">\n        <input type=\"text\" placeholder=\"Author:\" maxLength=\"15\" className=\"message-input\" onChange={this.authorHandler}/>\n        <textarea placeholder=\"Text:\" id='text-input' className=\"message-input\" onChange={this.textHandler} onKeyPress={this.keyPressed}></textarea>\n        <button onClick={this.sendMsg.bind(this, document.getElementById('text-input'))}>Send</button>\n      </div>\n    );\n  }\n}\n\nexport default Sender;\n","import React from 'react';\n\nclass Channel extends React.Component {\n  state={\n    room: ''\n  };\n  \n  channelHandler = (e) => {\n    this.setState({room: e.target.value});\n  };\n  \n  keyPressed = (e) => {\n    if(e.key === \"Enter\"){\n      this.props.getIn(this.state.room);\n    }\n  };\n\n  render(){\n    return (\n      <div className=\"sender content-box\">\n        <input type=\"text\" maxlength=\"10\" placeholder=\"Channel:\" className=\"message-input\" onChange={this.channelHandler} onKeyPress={this.keyPressed}/>\n        <button onClick={() => {this.props.getIn(this.state.room)}}>Send</button>\n      </div>\n    );\n  }\n}\n\nexport default Channel;\n","import React from 'react';\nimport Receiver from './components/receiver';\nimport Sender from './components/sender';\nimport Channel from './components/channel';\nimport socket from './services/io';\n\nclass App extends React.Component{\n  state = {\n    room: \"default\",\n    online: 0,\n    messages: []\n  };\n  \n  recvMethods = {\n    updateMsgs: (data) => {\n      this.setState((state) => {\n        console.log(state.messages);\n        return({messages: [...state.messages, data]});\n      });\n    },\n    clear: () => {\n      this.setState({messages: []});\n    }\n  };\n  \n  counter = (clients) => {\n    this.setState({online: clients});\n  };\n  \n  getIn = (nRoom) => {\n    console.log(nRoom);\n    nRoom = nRoom || \"default\";\n    \n    socket.emit('get', nRoom);\n    this.setState({room: nRoom});\n  };\n  \n  componentDidMount = () => {\n    const recvMethods = this.recvMethods;\n    const counter = this.counter;\n    socket.on('message', function(data){\n      recvMethods.updateMsgs(data);\n    });\n    socket.on('counter', function(clients){\n      counter(clients);\n    });\n    socket.on('clear', function(){\n      recvMethods.clear();\n   });\n  };\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Receiver mssgs={this.state.messages} clients={this.state.online} name={this.state.room}/>\n        <Sender />\n        <Channel getIn={this.getIn} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}