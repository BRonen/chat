{"version":3,"sources":["services/api.js","pages/login.js","pages/register.js","pages/components/receiver.js","services/io.js","pages/components/sender.js","pages/components/channel.js","pages/main.js","Routes.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","headers","Login","props","useState","login","setLogin","pass","setPass","status","setStatus","className","token","to","pathname","state","from","location","type","placeholder","onChange","e","target","value","onClick","post","then","data","setToken","err","response","Register","console","log","catch","Receiver","id","name","clients","mssgs","map","mssg","key","ownerName","content","socket","socketio","Sender","message","setMessage","sendMsg","emit","onKeyPress","preventDefault","document","getElementById","Channel","room","channelHandler","setState","keyPressed","getIn","maxLength","this","React","Component","Main","setRoom","counter","setCounter","user","setUser","loading","setLoading","messages","setMessages","reload","useEffect","on","oldMessages","profile","nRoom","PrivateRoute","component","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","exact","path","URL","process","href","origin","addEventListener","fetch","contentType","get","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.895f99ac.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://mychatteste.herokuapp.com/api'\n}, {headers: {'content-type': 'application/json'}});\n\nexport default api;\n","import React, {useState} from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport api from '../services/api';\n\nfunction Login(props) {\n\tconst [login, setLogin] = useState('');\n\tconst [pass, setPass] = useState('');\n\tconst [status, setStatus] = useState('Unauth');\n\n\tfunction logger (){\n\t\tapi.post('/login',{\n\t\t\t'login': login, 'password': pass\n\t\t}).then(data => {\n\t\t\tprops.setToken('Magic '+data.data.token);\n\t\t}, err => {\n\t\t\tsetStatus(err.response.data);\n\t\t});\n\t};\n\n\t//React.useEffect(logger, []);\n\n\treturn (\n\t\t<div className=\"Menu\">\n\t\t\t{props.token? (\n\t\t\t\t<Redirect to={{pathname: '/', state: {from: props.location} }}/>\n\t\t\t) : (<>\n\t\t\t\t<h1>Login</h1>\n\t\t\t\t<input type=\"text\" placeholder=\"Login:\" onChange={\n\t\t\t\t e => setLogin(e.target.value)}/>\n\t\t\t\t<input type=\"text\" placeholder=\"Password:\" onChange={\n\t\t\t\t e => setPass(e.target.value)}/>\n\t\t\t\t<div className=\"Buttons\">\n\t\t\t\t<button onClick={logger}>\n\t\t\t\t\tenter\n\t\t\t\t</button>\n\t\t\t\t<Link to=\"/register\">\n\t\t\t\t\t<button>register</button>\n\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<p>{(status === 'Unauth')? '' : status}</p>\n\t\t\t</>)}\n\t\t</div>\n\t);\n}\n\nexport default Login;\n","import React, {useState} from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport api from '../services/api';\n\nfunction Register(props) {\n\tconst [login, setLogin] = useState('');\n\tconst [pass, setPass] = useState('');\n\tconst [status, setStatus] = useState('Unauth');\n\t\n\tfunction register (){\n\t\tapi.post('/register',{\n\t\t\t'login': login, 'password': pass\n\t\t}).then(data => {\n\t\tconsole.log(data);\n\t\t\tprops.setToken(data.data.token);\n\t\t}).catch(err => {\n\t\t\tsetStatus(err.response.data);\n\t\t});\n\t};\n\t\n\treturn (\n\t\t<div className=\"Menu\">\n\t\t\t{props.token? (\n\t\t\t\t<Redirect to={{pathname: '/', state: {from: props.location} }}/>\n\t\t\t) : (<>\n\t\t\t\t<h1>Register</h1>\n\t\t\t\t<input type=\"text\" placeholder=\"Login:\" onChange={\n\t\t\t\t e => setLogin(e.target.value)}/>\n\t\t\t\t<input type=\"text\" placeholder=\"Password:\" onChange={\n\t\t\t\t e => setPass(e.target.value)}/>\n\t\t\t\t<div className=\"Buttons\">\n\t\t\t\t<button onClick={register}>\n\t\t\t\t\tenter\n        </button>\n\t\t\t\t<Link to=\"/login\">\n\t\t\t\t\t<button>login</button>\n\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<p>{(status === 'Unauth')? '' : status}</p>\n\t\t\t</>)}\n\t\t</div>\n\t);\n}\n\nexport default Register;\n","import React from 'react';\n\nfunction Receiver(props){\n    return (\n      <div className=\"receiver content-box\">\n        <center><h1 className=\"mssg\" id=\"name\">Room: {props.name} - {props.clients} online</h1></center>\n        <center><p className=\"mssg\">Server: This chat have been cleared</p></center>\n        {props.mssgs.map((mssg) => (\n          <p className=\"mssg\" key=\"key\">\n            {mssg.ownerName}: {mssg.content}<br />\n          </p>\n        ))}\n      </div>\n    );\n}\n\nexport default Receiver;\n","import socketio from 'socket.io-client';\n\nconst socket = socketio('https://mychatteste.herokuapp.com/api');\n\nexport default socket;","import React, {useState} from 'react';\nimport socket from '../../services/io';\n\nexport default function Sender(){\n  const [message, setMessage] = useState('');\n  \n  function textHandler(e){\n    setMessage(e.target.value);\n  }\n  \n  function keyPressed(e){\n    if(e.key === \"Enter\"){\n      e.preventDefault();\n      sendMsg(e.target);\n    }\n  };\n  \n  function sendMsg(target){\n    socket.emit('message', message);\n    target.value = '';\n  };\n\n  return (\n    <div className=\"sender content-box\">\n      <textarea placeholder=\"Text:\" id=\"text-input\" className=\"message-input\" onChange={textHandler} onKeyPress={keyPressed}></textarea>\n      <button onClick={() => sendMsg(document.getElementById(\"text-input\"))}>Send</button>\n    </div>\n  );\n}\n","import React from 'react';\n\nclass Channel extends React.Component {\n  state={\n    room: ''\n  };\n  \n  channelHandler = (e) => {\n    this.setState({room: e.target.value});\n  };\n  \n  keyPressed = (e) => {\n    if(e.key === \"Enter\"){\n      this.props.getIn(this.state.room);\n    }\n  };\n\n  render(){\n    return (\n      <div className=\"sender content-box\">\n        <input type=\"text\" maxLength=\"10\" placeholder=\"Channel:\" className=\"message-input\" onChange={this.channelHandler} onKeyPress={this.keyPressed}/>\n        <button onClick={() => {this.props.getIn(this.state.room)}}>Send</button>\n      </div>\n    );\n  }\n}\n\nexport default Channel;\n","import React, {useState, useEffect} from 'react';\nimport Receiver from './components/receiver';\nimport Sender from './components/sender';\nimport Channel from './components/channel';\nimport socket from '../services/io';\n\nimport './main.css';\n\nfunction Main(props){\n  const [room, setRoom] = useState('');\n  const [counter, setCounter] = useState(0);\n  const [user, setUser] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [messages, setMessages] = useState([]);\n  \n  function getIn(nRoom){\n    nRoom = nRoom || 'default';\n    socket.emit('get', nRoom);\n    setRoom(nRoom);\n  };\n  \n  function reload(){\n    if(loading){\n      setLoading(false);\n    }else if(!loading){\n      setLoading(true);\n    }\n  }\n  \n  useEffect( function(){\n    console.log(props.token)\n    socket.emit('auth', props.token);\n    \n    socket.on('message', function(data){\n      setMessages(oldMessages => ([...oldMessages, data]));\n    });\n    \n    socket.on('counter', function(clients){\n      console.log(clients);\n      setCounter(clients);\n    });\n    socket.on('profile', function(profile){\n      console.log(profile);\n      setUser(profile);\n    });\n    socket.on('room', setRoom);\n    socket.on('update', setMessages);\n    socket.on('disconnect', reload);\n    socket.on('error', console.log)\n  }, [loading]);\n  \n  return (\n    <div className=\"Main\">\n      <h1>{user.login}</h1>\n      <Receiver mssgs={messages} clients={counter} name={room}/>\n      <Sender />\n      <Channel getIn={getIn} />\n    </div>\n  );\n}\n\nexport default Main;\n","import React, {useState} from 'react';\nimport {BrowserRouter, Route, Switch, Redirect} from 'react-router-dom';\n\nimport Login from './pages/login';\nimport Register from './pages/register';\n\nimport Main from './pages/main';\n\nconst PrivateRoute = ({...props}) => (\n  <Route {...props} component={() => (\n    props.token ? ( <>\n      <Main token={props.token} />\n    </>) : (\n      <Redirect to={{pathname: '/login', state: {from: props.location} }}/>\n    )\n  )} />\n);\n\nexport default function Routes(){\n  const [token, setToken] = useState('');\n\n\treturn(\n  <BrowserRouter>\n    <Switch>\n      <PrivateRoute exact path=\"/\" setToken={setToken} token={token}/>\n      <Route exact path=\"/login\">\n        <Login setToken={setToken} token={token} />\n      </Route>\n      <Route exact path=\"/register\">\n        <Register setToken={setToken} token={token} />\n      </Route>\n    </Switch>\n  </BrowserRouter>);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './Routes';\nimport './index.css';\nimport './pages/menu.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}