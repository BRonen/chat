{"version":3,"sources":["services/io.js","components/receiver.js","components/sender.js","App.js","serviceWorker.js","index.js"],"names":["socket","socketio","Receiver","state","messages","updateMsgs","data","setState","console","log","componentDidMount","update","on","className","this","map","msg","author","text","React","Component","Sender","authorHandler","e","target","value","textHandler","keyPressed","key","sendMsg","emit","type","placeholder","onChange","onKeyPress","onClick","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.75c9b105.chunk.js","sourcesContent":["import socketio from 'socket.io-client';\n\nconst socket = socketio('https://mychatteste.herokuapp.com/');\n\nexport default socket;","import React from 'react';\nimport socket from '../services/io';\n\nclass Receiver extends React.Component {\n  \n  state = {messages: []};\n  \n  updateMsgs = (data) => {\n    this.setState((state) => {\n      console.log(state.messages);\n      return({messages: [...state.messages, data]});\n    });\n  };\n  \n  componentDidMount = () => {\n    var update = this.updateMsgs;\n    socket.on('message', function(data){\n      update(data);\n    })\n    \n  };\n\n  render(){\n    return (\n      <div className=\"receiver content-box\">\n        <h1>{this.state.messages.map((msg) => (\n          <p className=\"mssg\">\n            {msg.author}: {msg.text}<br />\n          </p>\n        ))}</h1>\n      </div>\n    );\n  }\n}\n\nexport default Receiver;\n","import React from 'react';\nimport socket from '../services/io';\n\nclass Sender extends React.Component {\n  state={\n    author: '',\n    text:''\n  };\n  \n  authorHandler = (e) => {\n    this.setState({author: e.target.value})\n  };\n  \n  textHandler = (e) => {\n    this.setState({text: e.target.value})\n  };\n  \n  keyPressed = (e) => {\n    if(e.key === \"Enter\"){\n      this.sendMsg();\n    }\n  };\n  \n  sendMsg = () => {\n    const {author, text} = this.state;\n    socket.emit('send', {author, text});\n  };\n\n  render(){\n    return (\n      <div className=\"sender content-box\">\n        <input type=\"text\" placeholder=\"Author:\" className=\"message-input\" onChange={this.authorHandler} onKeyPress={this.keyPressed}/>\n        <textarea placeholder=\"Text:\" className=\"message-input\" onChange={this.textHandler} onKeyPress={this.keyPressed}></textarea>\n        <button onClick={this.sendMsg}>Send</button>\n      </div>\n    );\n  }\n}\n\nexport default Sender;\n","import React from 'react';\nimport Receiver from './components/receiver';\nimport Sender from './components/sender';\n\nfunction App(){\n  return (\n    <div className=\"App\">\n      <Receiver />\n      <Sender />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}