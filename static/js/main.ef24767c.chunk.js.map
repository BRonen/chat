{"version":3,"sources":["services/io.js","components/receiver.js","components/sender.js","App.js","serviceWorker.js","index.js"],"names":["socket","socketio","Receiver","state","messages","chat","ss","on","data","console","log","updateMsgs","setState","className","this","map","author","text","React","Component","Sender","authorHandler","e","target","value","textHandler","keyPressed","key","sendMsg","emit","type","placeholder","onChange","onKeyPress","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAIeA,E,MAFAC,GAAS,qCCoCTC,E,2MAlCbC,MAAM,CACJC,SAAU,I,EAGZC,KAAO,SAACC,GAMN,OALAN,EAAOO,GAAG,WAAW,SAAAC,GACnBC,QAAQC,IAAIF,GACZC,QAAQC,IAAI,EAAKP,MAAMC,UACvBE,EAAGE,MAEE,EAAKL,MAAMC,U,EAGpBO,WAAa,SAACH,GACZC,QAAQC,IAAIF,GACZ,EAAKI,UAAS,SAAAT,GAEZ,MAAO,CAACC,SADE,sBAAOD,EAAMC,UAAb,CAAuBI,S,wEAK5B,IAAD,OACN,OACE,yBAAKK,UAAU,OACb,4BAAKC,KAAKT,MAAK,SAACG,GAAW,EAAKG,WAAYH,MAAUO,KAAI,SAACP,GAAD,OACxD,2BACGA,EAAKQ,OADR,KACkBR,EAAKS,KAAK,uC,GA3BfC,IAAMC,WCoCdC,E,2MAnCbjB,MAAM,CACJa,OAAQ,GACRC,KAAK,I,EAGPI,cAAgB,SAACC,GACf,EAAKV,SAAS,CAACI,OAAQM,EAAEC,OAAOC,S,EAGlCC,YAAc,SAACH,GACb,EAAKV,SAAS,CAACK,KAAMK,EAAEC,OAAOC,S,EAGhCE,WAAa,SAACJ,GACC,UAAVA,EAAEK,KACH,EAAKC,W,EAITA,QAAU,WAAO,IAAD,EACS,EAAKzB,MAArBa,EADO,EACPA,OAAQC,EADD,EACCA,KACfjB,EAAO6B,KAAK,OAAQ,CAACb,SAAQC,U,wEAI7B,OACE,yBAAKJ,UAAU,UACb,2BAAOiB,KAAK,OAAOC,YAAY,UAAUC,SAAUlB,KAAKO,cAAeY,WAAYnB,KAAKY,aACxF,2BAAOI,KAAK,OAAOC,YAAY,QAAQC,SAAUlB,KAAKW,YAAaQ,WAAYnB,KAAKY,aACpF,4BAAQQ,QAASpB,KAAKc,SAAtB,a,GA9BaV,IAAMC,W,MCWZgB,MATf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ef24767c.chunk.js","sourcesContent":["import socketio from 'socket.io-client';\n\nconst socket = socketio('https://mychatteste.herokuapp.com');\n\nexport default socket;","import React from 'react';\nimport socket from '../services/io';\n\nclass Receiver extends React.Component {\n  state={\n    messages: []\n  };\n  \n  chat = (ss) => {\n    socket.on('message', data => {\n      console.log(data);\n      console.log(this.state.messages);\n      ss(data);\n    });\n    return this.state.messages;\n  };\n  \n  updateMsgs = (data) => {\n    console.log(data);\n    this.setState(state => {\n      const list = [...state.messages, data];\n      return {messages: list};\n    });\n  };\n\n  render(){\n    return (\n      <div className=\"App\">\n        <h1>{this.chat((data) => { this.updateMsgs( data ) }).map((data) => (\n          <p>\n            {data.author}: {data.text}<br />\n          </p>\n        ))}</h1>\n      </div>\n    );\n  }\n}\n\nexport default Receiver;\n","import React from 'react';\nimport socket from '../services/io';\n\nclass Sender extends React.Component {\n  state={\n    author: '',\n    text:''\n  };\n  \n  authorHandler = (e) => {\n    this.setState({author: e.target.value})\n  };\n  \n  textHandler = (e) => {\n    this.setState({text: e.target.value})\n  };\n  \n  keyPressed = (e) => {\n    if(e.key === \"Enter\"){\n      this.sendMsg();\n    }\n  };\n  \n  sendMsg = () => {\n    const {author, text} = this.state;\n    socket.emit('send', {author, text});\n  };\n\n  render(){\n    return (\n      <div className=\"sender\">\n        <input type=\"text\" placeholder=\"Author:\" onChange={this.authorHandler} onKeyPress={this.keyPressed}/>\n        <input type=\"text\" placeholder=\"Text:\" onChange={this.textHandler} onKeyPress={this.keyPressed}/>\n        <button onClick={this.sendMsg}>Send</button>\n      </div>\n    );\n  }\n}\n\nexport default Sender;\n","import React from 'react';\nimport Receiver from './components/receiver';\nimport Sender from './components/sender';\nimport './App.css';\n\nfunction App(){\n  return (\n    <div className=\"App\">\n      <Sender />\n      <Receiver />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}